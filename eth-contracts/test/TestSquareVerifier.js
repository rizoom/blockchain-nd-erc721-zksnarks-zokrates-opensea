const truffleAssert = require("truffle-assertions");

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require("SquareVerifier");
const proof = require("../../zokrates/code/square/proof.json");

const VERIFIED_EVENT_NAME = "Verified";

contract("SquareVerifier", accounts => {
  const account_one = accounts[0];

  describe("Ensure SquareVerifier correctness", () => {
    beforeEach(async () => {
      this.contract = await SquareVerifier.new({ from: account_one });
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it("should test verification with correct proof", async () => {
      const result = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
      truffleAssert.eventEmitted(result, VERIFIED_EVENT_NAME, event => {
        return event.s === "Transaction successfully verified.";
      });
    });

    // Test verification with incorrect proof
    it("should test verification with incorrect input", async () => {
      let invalidInputs = [
        "0x0000000000000000000000000000000000000000000000000000000000000008", // 8 instead of 9
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ];
      let result = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, invalidInputs);
      truffleAssert.eventNotEmitted(result, VERIFIED_EVENT_NAME);

      invalidInputs = [
        "0x0000000000000000000000000000000000000000000000000000000000000009",
        "0x0000000000000000000000000000000000000000000000000000000000000002" // 2 instead of 1
      ];
      result = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, invalidInputs);
      truffleAssert.eventNotEmitted(result, VERIFIED_EVENT_NAME);
    });
  });
});
